package dns_resolver;

public class IPAddress implements Comparable<IPAddress> {


		int network;
		int subnet;
		int subnet2;
		int host;

		/**
		 * The constructor for the IPAddress class
		 * 
		 * @param ip the dotted-decimal IP address
		 */
		
		public IPAddress(String ip) {
			String data[] = ip.split("\\.");
					
			network = Integer.parseInt(data[0]);
			subnet = Integer.parseInt(data[1]);
			subnet2 = Integer.parseInt(data[2]);
			host = Integer.parseInt(data[3]);
		}

		/**
		 * Auto generated by eclipse, produces the hashcode()
		 */

		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + host;
			result = prime * result + network;
			result = prime * result + subnet;
			result = prime * result + subnet2;
			return result;
		}
		
		/**
		 * Auto generated by eclipse, produces equals(Object obj)
		 */

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			IPAddress other = (IPAddress) obj;
			if (host != other.host)
				return false;
			if (network != other.network)
				return false;
			if (subnet != other.subnet)
				return false;
			if (subnet2 != other.subnet2)
				return false;
			return true;
		}
		
		/**
		 * Auto generated by eclipse, produces the String class
		 */

		@Override
		public String toString() {
			return "IPAddress [network=" + network + ", subnet=" + subnet + ", subnet2=" + subnet2 + ", host=" + host + "]";
		}

		/**
		 *Compares IPAddress to the specified object in order 
		 *@return a negative integer, zero, or a positive integer as this object is less than,
		 *equal to, or greater than the specified object. 
	     */
		
		@Override
	public int compareTo(IPAddress obj) {
		if (network == obj.network) {
			if (subnet == obj.subnet) {
				if (subnet2 == obj.subnet2) {
					if (host == obj.host) {
						return 0;
					} else
						return host - obj.host;
				} else
					return subnet2 - obj.subnet2;
			} else
				return subnet - obj.subnet;
		} else
			return network - obj.network;
	}
}

